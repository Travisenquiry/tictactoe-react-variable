{"version":3,"sources":["components/Tictactoe/Option/NameComponent.jsx","components/Tictactoe/Option/BoardSizeComponent.jsx","components/Tictactoe/Option/GameStartComponent.jsx","components/Tictactoe/Board/BoardComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["NameComponent","props","player","playerIndex","playerClass","className","onChange","nameOnChangeFunction","BoardSizeComponent","defaultValue","defaultBoardSize","boardSizeOnChangeFunction","GameStartComponent","onClick","startGameFunction","BoardComponent","board","map","row","rowIndex","rows","col","colIndex","key","winState","squareClick","undefined","gameStarted","currentPlayer","currentSymbol","App","useState","setCurrentPlayer","setCurrentSymbol","playerOne","setPlayerOne","playerTwo","setPlayerTwo","boardSize","setBoardSize","setGameStarted","errorMessage","setErrorMessage","setWinState","setBoard","onChangeFunction","setValue","e","target","value","trim","toString","match","isNaN","boardTemp","boardRow","i","push","boardCloneRow","column","editBoard","currentBoard","flat","includes","length","j","calculateWinner","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0aa1389.chunk.js","sourcesContent":["import React from 'react';\nimport './NameComponent.css';\n\nconst NameComponent = (props) => {\n    //Variable to display the player number dynamically\n    let player = \"Player \" + props.playerIndex;\n\n    //Variable to pass to the class name of the input DOM\n    let playerClass = \"player-\" + props.playerIndex;\n\n    return (\n        <div className=\"name-input-div\">\n            Enter name for {player}\n            <input className={playerClass} onChange={props.nameOnChangeFunction}></input>\n        </div>\n    )\n}\n\nexport default NameComponent;","import React from 'react';\nimport './BoardSizeComponent.css';\n\nconst BoardSizeComponent = (props) => {\n    return (\n        <div className=\"board-size-input-div\">\n            Board Size (Enter a number between 3 and 9)\n            <input className=\"board-size\" defaultValue={props.defaultBoardSize} onChange={props.boardSizeOnChangeFunction}></input>\n        </div>\n    )\n}\n\nexport default BoardSizeComponent;","import React from 'react';\nimport './GameStartComponent.css';\n\nconst GameStartComponent = (props) => {\n    return (\n        <div className=\"game-start-div\">\n           <button onClick={props.startGameFunction}>Game Start</button>\n        </div>\n    )\n}\n\nexport default GameStartComponent;","import React from 'react';\nimport './BoardComponent.css';\n\nconst BoardComponent = (props) => {\n    //Function to map the board state to create and render it into HTML\n    const board = props.board.map((row,rowIndex) => {\n        //Creates the rows of the board\n        const rows = row.map((col,colIndex) => {\n            //Creates each column, removes onclick function upon detecting a win\n            return (\n                <span className=\"col\" key={colIndex} onClick={props.winState === \"\" ? () => {props.squareClick(colIndex, rowIndex)} : undefined}>\n                [ {col} ]\n                </span>\n            );\n        });\n\n        //Returns the complete row\n        return (\n          <div key={rowIndex} className=\"row\">\n            {rows}\n          </div>\n        );\n    });\n\n    return (\n        <div className=\"board-div\">\n            { props.gameStarted === \"yes\" ?\n                <div className=\"instruction-display\">\n                    { props.winState === \"\" ?\n                        <div className=\"current-player\">\n                            {props.currentPlayer}, choose a box to place an '{props.currentSymbol}' into:\n                        </div> \n                        : props.winState === \"Draw\" ?\n                        <div className=\"draw\">\n                            {props.winState}!, no one wins.\n                        </div>\n                        :\n                        <div className=\"winner\">\n                            Congratulations {props.winState}!, You have won.\n                        </div>\n                    }\n                    <br />\n                    <div className=\"board\">\n                        {board}\n                    </div>\n                </div> : null\n            }\n        </div>\n    )\n}\n\nexport default BoardComponent;","import React, {useState} from 'react';\nimport './App.css';\nimport NameComponent from './components/Tictactoe/Option/NameComponent.jsx';\nimport BoardSizeComponent from './components/Tictactoe/Option/BoardSizeComponent.jsx';\nimport GameStartComponent from './components/Tictactoe/Option/GameStartComponent.jsx';\nimport BoardComponent from './components/Tictactoe/Board/BoardComponent.jsx';\n\nconst App = () => {\n\t//Variables defined for players (Can be modified to be any amount of players)\n\tconst [currentPlayer, setCurrentPlayer] = useState(\"\");\n\tconst [currentSymbol, setCurrentSymbol] = useState(\"\");\n\tconst [playerOne, setPlayerOne] = useState(\"\");\n\tconst [playerTwo, setPlayerTwo] = useState(\"\");\n\t\n\t//Variables defined for options and status of the game\n\tconst [boardSize, setBoardSize] = useState(3);\n\tconst [gameStarted, setGameStarted] = useState(\"no\");\n\tconst [errorMessage, setErrorMessage] = useState(\"\");\n\n\t//Variables for the board and win state\n\tconst [winState, setWinState] = useState(\"\");\n\tconst [board, setBoard] = useState([]);\n\n\t//Input onchange function to be passed to NameComponent and BoardSizeComponent to set parent state for player names and size of board\n\tconst onChangeFunction = (setValue) => (e) => {\n\t\tsetValue(e.target.value);\n\t}\n\n\t//Error check function on options to be called upon clicking on game start button\n\tconst errorCheckFunction = () => {\n\t\t//Checks if names and board size are empty\n\t\tif(playerOne.trim() === \"\" || playerTwo.trim() === \"\" || boardSize.toString().trim() === \"\") {\n\t\t\tsetErrorMessage(\"Please enter all options\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Checks if names entered consists of any symbol or number\n\t\tif(!playerOne.match(/^[A-Za-z\\s]+$/) || !playerTwo.match(/^[A-Za-z\\s]+$/)){\n\t\t\tsetErrorMessage(\"Only alphabets and space are allowed as names\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Checks if player names are the same\n\t\tif(playerOne === playerTwo){\n\t\t\tsetErrorMessage(\"Please enter a different name for both players\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Checks if board size entered is an integer\n\t\tif(isNaN(boardSize)){\n\t\t\tsetErrorMessage(\"Please enter a number for board size\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Checks if board size entered is between 3 and 9\n\t\tif (boardSize < 3 || boardSize > 9){\n\t\t\tsetErrorMessage(\"Please enter a board size between 3 and 9\");\n\t\t\treturn false;\n\t\t}\n\n\t\t//Resets error message to empty and return true if passes error check\n\t\tsetErrorMessage(\"\");\n\t\treturn true;\n\t}\n\n\t//Game starting function to be passed to GameStartComponent to set parent state for starting game on click\n\tconst startGameFunction = () => {\n\t\t//Conditional to check if input passes the error check\n\t\tif(errorCheckFunction() === true){\n\t\t\t//Initialization of the game\n\t\t\tsetGameStarted(\"yes\");\n\t\t\tsetCurrentPlayer(playerOne);\n\t\t\tsetCurrentSymbol(\"o\");\n\n\t\t\t//Creates the array required for the board based on the size declared\n\t\t\tlet boardTemp = [];\n\t\t\tlet boardRow = [];\n\t\t\t//Pushes and create the board based on the board size input\n\t\t\t//Prevents the user from choosing size less than 2 and more than 9 for neatness purpose\n\t\t\tif(boardSize > 2 && boardSize < 10) {\n\t\t\t\tfor(let i=0; i<boardSize; i++) {\n\t\t\t\t\tboardRow.push(\"-\");\n\t\t\t\t}\n\t\t\t\tfor(let i=0; i<boardSize; i++) {\n\t\t\t\t\tlet boardCloneRow = [...boardRow];\n\t\t\t\t\tboardTemp.push(boardCloneRow);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Sets and initialize the state of the board with the complete array\n\t\t\tsetBoard(boardTemp);\n\t\t}\n\t}\n\n\t//Function to check for win state\n\tconst calculateWinner = (currentBoard) => {\n\t\t//Check for draw\n\t\tlet boardClone = [...board].flat(1);\n\t\tif(boardClone.includes(\"-\") === false){\n\t\t\tsetWinState(\"Draw\");\n\t\t}\n\n\t\t//Checks for win state by rows\n\t\tfor(let i=0; i<currentBoard.length; i++){\n\t\t\tfor(let j=0; j<currentBoard[i].length-2; j++){\n\t\t\t\tif(currentBoard[i][j] === currentBoard[i][j+1] && currentBoard[i][j] === currentBoard[i][j+2] && currentBoard[i][j] === \"o\"){\n\t\t\t\t\tsetWinState(playerOne);\n\t\t\t\t}else if(currentBoard[i][j] === currentBoard[i][j+1] && currentBoard[i][j] === currentBoard[i][j+2] && currentBoard[i][j] === \"x\"){\n\t\t\t\t\tsetWinState(playerTwo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Check for win state by column\n\t\tfor(let i=0; i<currentBoard.length-2; i++){\n\t\t\tfor(let j=0; j<currentBoard[i].length; j++){\n\t\t\t\tif(currentBoard[i][j] === currentBoard[i+1][j] && currentBoard[i][j] === currentBoard[i+2][j] && currentBoard[i][j] === \"o\"){\n\t\t\t\t\tsetWinState(playerOne);\n\t\t\t\t}else if(currentBoard[i][j] === currentBoard[i+1][j] && currentBoard[i][j] === currentBoard[i+2][j] && currentBoard[i][j] === \"x\"){\n\t\t\t\t\tsetWinState(playerTwo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Check for win state by diagonally downwards\n\t\tfor(let i=0; i<currentBoard.length-2; i++){\n\t\t\tfor(let j=0; j<currentBoard[i].length-2; j++){\n\t\t\t\tif(currentBoard[i][j] === currentBoard[i+1][j+1] && currentBoard[i][j] === currentBoard[i+2][j+2] && currentBoard[i][j] === \"o\"){\n\t\t\t\t\tsetWinState(playerOne);\n\t\t\t\t}else if(currentBoard[i][j] === currentBoard[i+1][j+1] && currentBoard[i][j] === currentBoard[i+2][j+2] && currentBoard[i][j] === \"x\"){\n\t\t\t\t\tsetWinState(playerTwo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Check for win state by diagonally upwards\n\t\tfor(let i=2; i<currentBoard.length; i++){\n\t\t\tfor(let j=0; j<currentBoard[i].length; j++){\n\t\t\t\tif(currentBoard[i][j] === currentBoard[i-1][j+1] && currentBoard[i][j] === currentBoard[i-2][j+2] && currentBoard[i][j] === \"o\"){\n\t\t\t\t\tsetWinState(playerOne);\n\t\t\t\t}else if(currentBoard[i][j] === currentBoard[i-1][j+1] && currentBoard[i][j] === currentBoard[i-2][j+2] && currentBoard[i][j] === \"x\"){\n\t\t\t\t\tsetWinState(playerTwo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//Function to be passed into BoardComponent for squares to change symbols\n\tconst squareClick = (column, row) => {\n\t\t//Clones a copy of the board state to be mutated\n\t\tlet editBoard = [...board];\n\n\t\t//Checks which is the current player and if the square is empty\n        if(currentPlayer === playerOne && editBoard[row][column] === \"-\"){\n\t\t\teditBoard[row][column] = \"o\";\n\t\t\tsetCurrentPlayer(playerTwo);\n\t\t\tsetCurrentSymbol(\"x\");\n        }else if(currentPlayer === playerTwo && editBoard[row][column] === \"-\"){\n\t\t\teditBoard[row][column] = \"x\";\n\t\t\tsetCurrentPlayer(playerOne);\n\t\t\tsetCurrentSymbol(\"o\");\n\t\t}\n\t\t\n\t\t//Sets the board state to be the new state and calculate if there is a winner\n\t\tsetBoard(editBoard);\n\t\tcalculateWinner(board);\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"header\">\n\t\t\t\tTic tac toe\n\t\t\t</div>\n\t\t\t{ gameStarted === \"no\" ? \n\t\t\t\t<div className=\"options\">\n\t\t\t\t\t<NameComponent playerIndex=\"1\" nameOnChangeFunction={onChangeFunction(setPlayerOne)}/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<NameComponent playerIndex=\"2\" nameOnChangeFunction={onChangeFunction(setPlayerTwo)}/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<BoardSizeComponent defaultBoardSize={boardSize} boardSizeOnChangeFunction={onChangeFunction(setBoardSize)}/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<GameStartComponent startGameFunction={startGameFunction}/>\n\t\t\t\t\t<div className=\"error-message\">\n\t\t\t\t\t\t{errorMessage}\n\t\t\t\t\t</div>\n\t\t\t\t</div> \n\t\t\t\t: null \n\t\t\t}\n\t\t\t<BoardComponent boardSize={boardSize} board={board} squareClick={squareClick} currentPlayer={currentPlayer} currentSymbol={currentSymbol} gameStarted={gameStarted} winState={winState}/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}